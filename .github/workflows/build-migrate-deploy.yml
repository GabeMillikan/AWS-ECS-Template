name: Build Images, Migrate Database, and Deploy ECS Service

on:
  push:
    branches:
      - main

jobs:
  build-nginx:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Configure Amazon ECR credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECR_ACCESS_KEY_SECRET }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build NGINX and push to ECR
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./.docker/nginx.Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_ECR_NGINX_REPO }}:latest
        build-args: |
          FASTAPI_SERVER=localhost:8000

  build-fastapi:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Configure Amazon ECR credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ECR_ACCESS_KEY_SECRET }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build FastAPI and push to ECR
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./.docker/fastapi.Dockerfile
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_ECR_FASTAPI_REPO }}:latest
  
  migrate:
    runs-on: ubuntu-latest
    needs: [build-nginx, build-fastapi]
    steps:
    - name: Migrate database
      run: echo "TODO"

  deploy:
    runs-on: ubuntu-latest
    needs: migrate
    steps:
    - name: Deploy to Amazon ECS
      run: |
        aws ecs update-service --cluster ${{ vars.AWS_ECS_CLUSTER_NAME }} --service ${{ vars.AWS_ECS_SERVICE_NAME }} --force-new-deployment
